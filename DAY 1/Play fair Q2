#include <stdio.h>
#include <string.h>
#include <ctype.h>

void createPlayfairTable(char table[5][5], char key[]) {
    int i, j, k, len, key_len = strlen(key);
    char used[26] = {0};

    // Fill in the key
    len = 0;
    for (i = 0; i < key_len; ++i) {
        char c = tolower(key[i]);
        if (c == 'j') c = 'i';
        if (!used[c - 'a']) {
            table[len / 5][len % 5] = c;
            used[c - 'a'] = 1;
            ++len;
        }
    }

    // Fill in the remaining alphabets
    for (k = 0; k < 26; ++k) {
        char c = 'a' + k;
        if (c == 'j') continue; // Skip 'j', it's combined with 'i'
        if (!used[c - 'a']) {
            table[len / 5][len % 5] = c;
            ++len;
        }
    }
}

void encrypt(char table[5][5], char *plain_text, char *cipher_text) {
    int i, j, len = strlen(plain_text);
    char padded_text[len * 2]; // Doubled size to accommodate 'x' padding
    int index = 0;

    // Prepare the padded text and handle 'x' insertion
    for (i = 0; i < len; ++i) {
        char c = tolower(plain_text[i]);
        if (c == ' ') continue;
        padded_text[index++] = c;
        if (i < len - 1 && padded_text[index - 1] == padded_text[index]) {
            padded_text[index++] = 'x';
        }
    }
    padded_text[index] = '\0';

    // Perform encryption
    len = strlen(padded_text);
    for (i = 0; i < len; i += 2) {
        int row1, col1, row2, col2;
        char ch1 = padded_text[i];
        char ch2 = (i + 1 < len) ? padded_text[i + 1] : 'x';

        // Find positions in the table
        for (j = 0; j < 5; ++j) {
            if (strchr(table[j], ch1) != NULL) {
                row1 = j;
                col1 = strchr(table[j], ch1) - table[j];
            }
            if (strchr(table[j], ch2) != NULL) {
                row2 = j;
                col2 = strchr(table[j], ch2) - table[j];
            }
        }

        // Same row
        if (row1 == row2) {
            cipher_text[i] = table[row1][(col1 + 1) % 5];
            cipher_text[i + 1] = table[row2][(col2 + 1) % 5];
        }
        // Same column
        else if (col1 == col2) {
            cipher_text[i] = table[(row1 + 1) % 5][col1];
            cipher_text[i + 1] = table[(row2 + 1) % 5][col2];
        }
        // Different row and column
        else {
            cipher_text[i] = table[row1][col2];
            cipher_text[i + 1] = table[row2][col1];
        }
    }
    cipher_text[len] = '\0';
}

void decrypt(char table[5][5], char *cipher_text, char *plain_text) {
    int i, j, len = strlen(cipher_text);
    char decrypted_text[len];

    // Perform decryption
    for (i = 0; i < len; i += 2) {
        int row1, col1, row2, col2;
        char ch1 = cipher_text[i];
        char ch2 = cipher_text[i + 1];

        // Find positions in the table
        for (j = 0; j < 5; ++j) {
            if (strchr(table[j], ch1) != NULL) {
                row1 = j;
                col1 = strchr(table[j], ch1) - table[j];
            }
            if (strchr(table[j], ch2) != NULL) {
                row2 = j;
                col2 = strchr(table[j], ch2) - table[j];
            }
        }

        // Same row
        if (row1 == row2) {
            decrypted_text[i] = table[row1][(col1 + 4) % 5];
            decrypted_text[i + 1] = table[row2][(col2 + 4) % 5];
        }
        // Same column
        else if (col1 == col2) {
            decrypted_text[i] = table[(row1 + 4) % 5][col1];
            decrypted_text[i + 1] = table[(row2 + 4) % 5][col2];
        }
        // Different row and column
        else {
            decrypted_text[i] = table[row1][col2];
            decrypted_text[i + 1] = table[row2][col1];
        }
    }
    decrypted_text[len] = '\0';

    // Remove 'x' padding if present
    int pad_len = strlen(decrypted_text);
    for (i = pad_len - 1; i >= 0; --i) {
        if (decrypted_text[i] == 'x' && decrypted_text[i - 1] == decrypted_text[i]) {
            decrypted_text[i] = '\0';
        } else {
            break;
        }
    }

    strcpy(plain_text, decrypted_text);
}

int main() {
    char table[5][5];
    char key[50];
    char text[100];
    char result[100];
    int choice;

    printf("Enter the Key: ");
    scanf("%s", key);
    createPlayfairTable(table, key);

    printf("Enter 1 to Encrypt or 2 to Decrypt: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter the Plain text: ");
        getchar(); // Consume the newline character from the previous input
        fgets(text, sizeof(text), stdin); // Read the entire line

        // Call the encryption function
        encrypt(table, text, result);
        printf("The Encrypted text is: %s\n", result);
    } else if (choice == 2) {
        printf("Enter the Cipher text: ");
        getchar(); // Consume the newline character from the previous input
        fgets(text, sizeof(text), stdin); // Read the entire line

        // Call the decryption function
        decrypt(table, text, result);
        printf("The Decrypted text is: %s\n", result);
    } else {
        printf("Invalid choice.\n");
    }
}
